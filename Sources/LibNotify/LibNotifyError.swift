import notify

/*
 * Portions Copyright (c) 2003-2010 Apple Inc.  All Rights Reserved.
 * Original: https://github.com/apple-oss-distributions/Libnotify/blob/Libnotify-327.0.5/notify.3
 *
 * The error strings are taken form the notify man page.
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this
 * file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 */

private func notify_strerror(_ code: UInt32) -> String {
    switch Int32(code) {
    case NOTIFY_STATUS_OK:
        return "The function did not encounter any issues."
    case NOTIFY_STATUS_INVALID_NAME:
        return "Name argument is not valid."
    case NOTIFY_STATUS_INVALID_TOKEN:
        return
            "The function expected a valid token, given by a notify_register_* function, and was passed an invalid token."
    case NOTIFY_STATUS_INVALID_PORT:
        return "The function is not able to use the port passed."
    case NOTIFY_STATUS_INVALID_FILE:
        return
            "The function was passed NULL, or something that is not a file descriptor generated by notify_register_file_descriptor."
    case NOTIFY_STATUS_INVALID_SIGNAL:
        return "Legacy, currently unused."
    case NOTIFY_STATUS_INVALID_REQUEST:
        return "An internal error occurred."
    case NOTIFY_STATUS_NOT_AUTHORIZED:
        return "The calling process is not authorized to take this action."
    case NOTIFY_STATUS_OPT_DISABLE:
        return "An internal error occurred."
    case NOTIFY_STATUS_SERVER_NOT_FOUND:
        return "The server could not be found."
    case NOTIFY_STATUS_NULL_INPUT:
        return "One of the inputs was called with NULL when it must not be NULL."
    case NOTIFY_STATUS_FAILED:
        return "Indicates an internal failure of the library."
    default:
        return "Unknown error code \(code)."
    }
}

extension LibNotify {
    /// An error for Libnotify.
    struct LibNotifyError: Error, CustomStringConvertible {
        var description: String {
            return "Error \(code): \(notify_strerror(code))"
        }
        let code: UInt32
    }

    // Calls a Libnotify function and throws an error if the return code is not OK.
    static func call(_ call: @autoclosure () -> UInt32) throws {
        let code = call()
        guard code == NOTIFY_STATUS_OK else {
            throw LibNotifyError(code: code)
        }
    }
}
